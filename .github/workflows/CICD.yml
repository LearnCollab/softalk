# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CICD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set yaml secret
      uses: microsoft/variable-substitution@v1
      with:
        files: './src/main/resources/application.yml'
      env:
        spring.datasource.url: ${{ secrets.DATABASE_URL }}
        spring.datasource.username: ${{ secrets.DATABASE_USERNAME }}
        spring.datasource.password: ${{ secrets.DATABASE_PASSWORD }}

        spring.security.oauth2.client.registration.kakao.client-id: ${{ secrets.CLIENT_ID }}
        spring.security.oauth2.client.registration.kakao.client-secret: ${{ secrets.CLIENT_SECRET }}

        jwt.secret: ${{ secrets.JWT_SECRET }}
        jwt.expirationHours: ${{ secrets.JWT_EXPIRATIONHOURS }}
        jwt.expirationDays: ${{ secrets.JWT_EXPIRATIONDAYS }}
        jwt.issuer: ${{ secrets.ISSUER }}

    - name: Replace docker variables
      run: |
        sed -i 's/DOCKER_USERNAME/${{ secrets.DOCKER_USERNAME }}/g' ./docker-compose.yml
        
    - name: Copy docker-compose.yml to EC2
      env:
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        scp -i private_key.pem -o StrictHostKeyChecking=no docker-compose.yml ec2-user@${{ secrets.HOST }}:/home/ec2-user/
        rm -f private_key.pem
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup MySQL
      uses: samin/mysql-action@v1
      with:
        mysql database: 'softalk'
        mysql user: ${{ secrets.DATABASE_USERNAME }}
        mysql password: ${{ secrets.DATABASE_PASSWORD }}

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
        
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: clean build -x test

    - name: Docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/softalk-spring .
        docker build -f dockerfile-nginx -t ${{ secrets.DOCKER_USERNAME }}/softalk-nginx .
        docker push ${{ secrets.DOCKER_USERNAME }}/softalk-spring
        docker push ${{ secrets.DOCKER_USERNAME }}/softalk-nginx

    - name: Deploy
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.HOST }}
        username: ec2-user
        key: ${{ secrets.PRIVATE_KEY }}
        script: |
          sudo docker rm -f $(docker ps -qa)
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/softalk-spring
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/softalk-nginx
          docker-compose up -d
          docker image prune -f
